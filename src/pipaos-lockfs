#!/usr/bin/python
#
# pipaos-lockfs
#
# Command line tool to lock the file system and avoid sdcard corruption.
# Locking is accomplished by mounting the root and boot partitions in read-only mode.
#

import os
import sys


class LockFS():
    '''
    LockFS class manages the locking and unlocking of the root and boot partitions.
    It can work in life mode and persistent modes.
    The first will remount them immediately, the latter will edit /etc/fstab.
    Lokking these filesystems means mounting them in read-only mode,
    which allows to avoid sdcard corruption during sudden poweroffs on the RaspberryPI.
    '''
    def __init__(self):
        self.fstab='/etc/fstab'

    def is_fslocked(self, mounts=True):
        '''
        Returns True if both the root and boot partitions are currently
        mounted in read-only mode.
        '''
        if mounts:
            rc1=os.system('grep root /proc/mounts | grep ro, > /dev/null 2>&1')
            rc2=os.system('grep boot /proc/mounts | grep ro, > /dev/null 2>&1')
        else:
            rc1=os.system('grep /dev/mmcblk0p1 {} | grep ,ro > /dev/null 2>&1'.format(self.fstab))
            rc2=os.system('grep /dev/mmcblk0p2 {} | grep ,ro > /dev/null 2>&1'.format(self.fstab))

        return rc1==0 and rc2==0

    def status(self):
        '''
        Returns a friendly message to know wether the filesystem is currently locked
        '''
        message = 'file system is {}\n'.format('locked' if self.is_fslocked(True) else 'unlocked')
        message+= 'fstab mounts are {}'.format('locked' if self.is_fslocked(False) else 'unlocked')
        return message

    def _fstab_remount(self, mode):
        '''
        For persistent locks, the file /etc/fstab is edited to reflect to new
        mount mode requested. A reboot is required afterwards
        '''

        if mode not in ('ro', 'rw'):
            return False

        root_mount='/dev/mmcblk0p2\t/\text4\tdefaults,noatime,{}\t0\t0\n'.format(mode)
        boot_mount='/dev/mmcblk0p1\t/boot\tvfat\tdefaults,noatime,{}\t0\t0\n'.format(mode)
        
        with open(self.fstab, 'r') as f:
            mounts=f.readlines()

        for j,line in enumerate(mounts):
            if line.startswith('/dev/mmcblk0p2'):
                mounts[j]=root_mount
                continue
            
            if line.startswith('/dev/mmcblk0p1'):
                mounts[j]=boot_mount
                continue

        with open(self.fstab, 'w') as f:
            f.writelines(mounts)

        # Allow DHCP to write the DNS servers in read-only,
        # otherwise networking would be broken in block mode.
        if mode == 'ro':
            os.system('touch /tmp/resolv.conf')
            os.system('ln -sfv /tmp/resolv.conf /etc/resolv.conf')
        else:
            os.system('rm -f /etc/resolv.conf')
            os.system('mv -f /tmp/resolv.conf /etc/resolv.conf')

        return True

    def remount(self, mode, persistent):
        '''
        Life remounting of the file systems in the given mode, can be either 'ro' or 'rw'.
        If persistent, no life remount will take place, but against /etc/fstab instead.
        '''
        
        if mode not in ('ro', 'rw'):
            return False

        if persistent:
            return self._fstab_remount(mode)
        else:
            rc1=os.system('mount -o remount,{} /'.format(mode))
            rc2=os.system('mount -o remount,{} /boot'.format(mode))
            return rc1==0 and rc2==0

    def lock_fs(self, persistent=False):
        '''
        Immediately remount the filesystems in read-only mode
        '''
        return self.remount('ro', persistent)

    def unlock_fs(self, persistent=False):
        '''
        Immediately remount the filesystems in read-write mode
        '''
        return self.remount('rw', persistent)



if __name__ == '__main__':

    success=False
    persistent=False
    
    if os.getuid() != 0:
        print 'Root permissions needed, you can use sudo'
        sys.exit(1)

    if len(sys.argv) < 2 or sys.argv[1] not in ('lock', 'unlock', 'status'):
        print 'Syntax: pipaos-lockfs <lock | unlock | status> [persistent]'
        sys.exit(1)
    else:
        mode = sys.argv[1]
        if len(sys.argv) > 2 and sys.argv[2] == 'persistent':
            persistent = True
    
    locker=LockFS()
    if mode == 'status':
        print locker.status()
        success=True
        sys.exit(0)
    elif mode == 'lock':
        success=locker.lock_fs(persistent)
    elif mode == 'unlock':
        success=locker.unlock_fs(persistent)

    if persistent:
        print 'WARNING: persistent mode - a reboot is required'
        print 'Your current mounts have not been changed'

    sys.exit(0 if success==True else 1)
